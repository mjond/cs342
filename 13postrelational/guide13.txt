1. Read Pramod Sadalage’s NoSQL Databases: An Overview (circa 2012) and explain:
	a. the key motivations for considering non-relational database systems.
	NoSQL allows database developers to develop without having to convert in-memory structures to relational structures.
	Relational databases were not designed to run efficiently on clusters - large volumes of data from websites.
	There is also a movement away from using databases as integration points in favor of encapsulating databases with applications.
	b. aggregate data models.
	This is driven by domain driven design. These units of data form the ACID properties. Aggregates make it easier for databases to manage data storage over clusters since the data could sit on any machine that retrieved it from the database. 
	c. polyglot persistence.
	When storing data, use multiple data storage technologies. Different kinds of data are best dealt with different data sources.
	d. the relevance of the CAP theorem.
	In a distributed system, managing consistency, availability, and partition tolerance is important. Eric Brewer argues that in a distributed system, we can only choose two of consistency, availability or partition tolerance. 
	e. the types of NoSQL databases.
	The types of noSQL databases can be broadly categorized into four categories:
		1) Key-value databases - the simplest form. The client can get a key, put a value for a key or delete a key from the data store. Easily scalable.
		2) Document databses - the database stores and retrieves documents transferred by XML, JSON or BSON. Document databases store values in the key part of the key-value store.
		3) Column family stores - store data in column families as rows that have many columns associated with a row key. Groups of related data that is often accessed together.
		4) Graph databases - allows one to store entities and relationships between these entities. Entities are known as nodes. Usually it's for a single type of relationship, not multiple since these is a lot of data movement. 
	f. when (and when not) to use NoSQL database systems.
	When - to improve programmer productivity by using a database that best matches the application's needs, to improve data access performance
	When not - 
	An alternate source of this basic information is Martin Fowler’s Introduction to NoSQL video.
	
2. Use “Getting Started with the Key/Value API”, Chapters 3–5, from the Oracle NoSQL Database documentation as a reference. Be sure to know how to:
	a. Compare and contrast Major and minor key components.
	Major - email address
	Minor - street address, phone number, photograph and name
	b. Use the appropriate commands to write and retrieve records.
	Writing:
	ArrayList majorComponents = new ArrayList(); 
	ArrayList minorComponents = new ArrayList(); 
	// Define the major and minor path components for the key 
	majorComponents.add("Smith"); 
	majorComponents.add("Bob"); 
	minorComponents.add("phonenumber"); 
	// Create the key Key myKey = Key.createKey(majorComponents, minorComponents); 
	String data = "408 555 5555"; 
	// Create the value. Notice that we serialize the contents of the // String object when we create the value.
	Value myValue = Value.createValue(data.getBytes()); 
	
	Reading:
	//using the data created above
	ValueVersion vv = kvstore.get(myKey); 
	Value v = vv.getValue(); 
	String data = new String(v.getValue());
	Be sure that you can compare and contrast relational data representations with key-value representations. Note that we will not use these higher-level features: the NoSQL Table API (We’ll focus on the lower-level key/value API); the Avro value schema mechanism (We’ll restrict ourselves to simple string values).
	Key-value is schema-less making the database more logical than physical. 
3. This practical article by Re Lai, Enterprise Application Development Using Oracle NoSQL Database, is also helpful. It includes some material that we don't care about (i.e., NetBeans, UML, Avro value-handling) but the following sections are useful for the homework. Skim them now and be prepared to reference them later as needed.
	a. “Represent Key-Value Pairs” — Designing keys
	Keys consist of Java strings grouping into two parts: major and minor components. See above for differnence of major and minor.
	b. “CRUD” — Implementing the standard persistent data operations
	Create, read, update and delete functions are fully supported
	c. “Composite Keys” — Designing multi-element keys
	Composite keys serve as an important modeling facility. They are intuitively simple and and powerful.
	d. “Model Entities” — Modeling relational records in a KV store
	Modeled in two ways in oracle NoSQL database: 
		1) structured values - the key-value represents a record in RDBMS with the key representing the primary key.
		2) name-value pairs - save the data as multiple name-value pairs.
	e. “Model Secondary Indexes” — Storing and retrieving sorted data
	Relational databases rely on indexes to speed up queries. NoSQL databases including Oracle noSQL does not support indexing. This task is instead shifted to clients. It is straightforward to model indexing using composite keys. 
	f. “Model Multi-values and Relationships” — Modeling foreign key relationships
	One to one and many to many - the concept is universal in SQL and noSQL databases.
